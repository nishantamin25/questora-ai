
interface CoursePDFData {
  title: string;
  description: string;
  content: string;
  materials?: any[];
}

class PDFGeneratorServiceClass {
  generateCoursePDF(courseData: CoursePDFData): string {
    console.log('ðŸ”„ Generating PDF for course:', courseData.title);
    
    const pdfContent = this.createPDFContent(courseData);
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    const pdfUrl = URL.createObjectURL(blob);
    
    console.log('âœ… PDF generated successfully');
    return pdfUrl;
  }

  private createPDFContent(courseData: CoursePDFData): string {
    // For now, create a comprehensive HTML-to-PDF content
    // In a full implementation, you'd use a library like jsPDF or PDFKit
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${courseData.title}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        h3 { color: #7f8c8d; }
        p { margin-bottom: 15px; text-align: justify; }
        .course-info { background: #ecf0f1; padding: 20px; border-radius: 10px; margin-bottom: 30px; }
        .section { margin-bottom: 25px; page-break-inside: avoid; }
        .page-break { page-break-before: always; }
        .footer { position: fixed; bottom: 30px; right: 30px; font-size: 12px; color: #7f8c8d; }
    </style>
</head>
<body>
    <div class="course-info">
        <h1>${courseData.title}</h1>
        <p><strong>Course Description:</strong> ${courseData.description}</p>
        <p><strong>Generated on:</strong> ${new Date().toLocaleDateString()}</p>
    </div>

    <div class="section">
        <h2>Course Introduction</h2>
        <p>Welcome to this comprehensive educational course. This material has been carefully structured to provide you with essential knowledge and practical understanding of the subject matter.</p>
        
        <h3>Learning Objectives</h3>
        <p>By completing this course, you will:</p>
        <ul>
            <li>Understand fundamental concepts and principles</li>
            <li>Apply knowledge to practical situations</li>
            <li>Develop critical thinking and analytical skills</li>
            <li>Master essential techniques and methodologies</li>
        </ul>
    </div>

    <div class="page-break"></div>
    
    <div class="section">
        <h2>Core Content</h2>
        ${this.formatContentForPDF(courseData.content)}
    </div>

    ${courseData.materials ? this.formatMaterialsForPDF(courseData.materials) : ''}

    <div class="page-break"></div>
    
    <div class="section">
        <h2>Course Summary</h2>
        <p>This course has provided comprehensive coverage of the essential topics and concepts. The material presented offers both theoretical understanding and practical applications.</p>
        
        <h3>Key Takeaways</h3>
        <ul>
            <li>Comprehensive understanding of core concepts</li>
            <li>Practical application skills developed</li>
            <li>Critical thinking capabilities enhanced</li>
            <li>Ready for assessment and evaluation</li>
        </ul>
        
        <h3>Next Steps</h3>
        <p>Now that you have completed the course material, you are ready to proceed with the assessment. The test will evaluate your understanding and application of the concepts covered in this course.</p>
        
        <p><strong>Assessment Preparation:</strong> Review the key concepts, practice applying the knowledge, and ensure you understand the practical applications discussed throughout the course.</p>
    </div>

    <div class="footer">
        Course PDF - Generated by Educational System
    </div>
</body>
</html>`;

    return htmlContent;
  }

  private formatContentForPDF(content: string): string {
    if (!content) return '<p>Course content is being processed...</p>';
    
    // Split content into paragraphs and format
    const paragraphs = content.split('\n\n').filter(p => p.trim().length > 0);
    
    return paragraphs.map(paragraph => {
      // Check if it looks like a heading
      if (paragraph.length < 100 && paragraph.includes(':')) {
        return `<h3>${paragraph}</h3>`;
      }
      return `<p>${paragraph.replace(/\n/g, ' ')}</p>`;
    }).join('');
  }

  private formatMaterialsForPDF(materials: any[]): string {
    if (!materials || materials.length === 0) return '';
    
    let materialsHTML = '<div class="page-break"></div><div class="section"><h2>Additional Learning Materials</h2>';
    
    materials.forEach((material, index) => {
      materialsHTML += `
        <div class="section">
            <h3>${material.title || `Material ${index + 1}`}</h3>
            <p>${material.content || 'Additional learning material content'}</p>
        </div>`;
    });
    
    materialsHTML += '</div>';
    return materialsHTML;
  }

  downloadPDF(pdfUrl: string, filename: string): void {
    const link = document.createElement('a');
    link.href = pdfUrl;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

export const PDFGeneratorService = new PDFGeneratorServiceClass();
